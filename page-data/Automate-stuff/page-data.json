{"componentChunkName":"component---src-templates-blog-post-js","path":"/Automate-stuff/","result":{"data":{"site":{"siteMetadata":{"title":"dayDreams ++","author":"Athul Cyriac Ajay"}},"mdx":{"id":"607820f9-bb67-5d65-885b-57f282dea0e2","excerpt":"Ever encountered a time when you have a few working branches which you update daily? Then you'll know how tiresome it is to  checkout  to every branch andâ€¦","body":"function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsx mdx */\nvar _frontmatter = {\n  \"title\": \"Shell Scripting to Automation\",\n  \"date\": \"2019-07-02\",\n  \"description\": \"Automating Basic Unix stuff with Shell Scripts/Bash Scripts. From Pushing to different branches to saving you a Few Keypresses\"\n};\n\nvar makeShortcode = function makeShortcode(name) {\n  return function MDXDefaultShortcode(props) {\n    console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\");\n    return mdx(\"div\", props);\n  };\n};\n\nvar layoutProps = {\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, [\"components\"]);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"p\", null, \"Ever encountered a time when you have a few working branches which you update daily? Then you\\u2019ll know how tiresome it is to \", mdx(\"code\", _extends({\n    parentName: \"p\"\n  }, {\n    \"className\": \"language-text\"\n  }), \"checkout\"), \" to every branch and typing \", mdx(\"code\", _extends({\n    parentName: \"p\"\n  }, {\n    \"className\": \"language-text\"\n  }), \"git push <branch name>\"), \" . If you haven\\u2019t encountered this,try doing it once, you\\u2019ll know what I\\u2019m saying\\uD83D\\uDE0F\\uD83D\\uDE0F.\", mdx(\"br\", {\n    parentName: \"p\"\n  }), \"\\n\", \"We could always automate these stuff just by a few line of shell code.It\\u2019s quite \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"easy\"), \" you know. Starting by taking the above said situation,you\\u2019ve got 5 branches and you want to push to all these 5 branches. We\\u2019ll write a shell script for it.\"), mdx(\"div\", {\n    \"className\": \"gatsby-highlight\",\n    \"data-language\": \"bash\"\n  }, mdx(\"pre\", _extends({\n    parentName: \"div\"\n  }, {\n    \"className\": \"language-bash\"\n  }), mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-bash\"\n  }), mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"token builtin class-name\"\n  }), \"cd\"), \" ~/path/to/git/repository/ \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"token comment\"\n  }), \"#Assuming you are anywhere\"), \"\\n\", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"token keyword\"\n  }), \"for\"), \" \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"token for-or-select variable\"\n  }), \"i\"), \" \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"token keyword\"\n  }), \"in\"), \" \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"token string\"\n  }), \"'master'\"), \" \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"token string\"\n  }), \"'dev'\"), \" \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"token string\"\n  }), \"'fix1'\"), \" \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"token string\"\n  }), \"'patch1'\"), \" \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"token string\"\n  }), \"'dope-branch-name'\"), \"\\n\", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"token keyword\"\n  }), \"do\"), \"\\n\\t\", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"token function\"\n  }), \"git\"), \" checkout \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"token variable\"\n  }), \"$i\"), \"\\n\\t\", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"token function\"\n  }), \"git\"), \" pull origin \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"token variable\"\n  }), \"$i\"), \" \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"token operator\"\n  }), \"&&\"), \" \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"token function\"\n  }), \"git\"), \" push origin \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"token variable\"\n  }), \"$i\"), \"\\n\", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"token keyword\"\n  }), \"done\")))), mdx(\"p\", null, \"This 7 line script can help you save some keystrokes.You should save this script with a \", mdx(\"code\", _extends({\n    parentName: \"p\"\n  }, {\n    \"className\": \"language-text\"\n  }), \".sh\"), \" extension and can be  run by typing \", mdx(\"code\", _extends({\n    parentName: \"p\"\n  }, {\n    \"className\": \"language-text\"\n  }), \"sh script_filename.sh\"), \" So now,what does this mean? It\\u2019s the same thing you type in the terminal with a for loop as for extra a \", mdx(\"em\", {\n    parentName: \"p\"\n  }, \"\\u201Cdev\\u201D\"), \" touch\\uD83D\\uDE01\\uD83D\\uDE01.\", mdx(\"br\", {\n    parentName: \"p\"\n  }), \"\\n\", \"The looping variable \", mdx(\"code\", _extends({\n    parentName: \"p\"\n  }, {\n    \"className\": \"language-text\"\n  }), \"i\"), \" will loop through the strings we\\u2019ve passed through, these will be our branch names and inside the for loop the variable is passed by a \", mdx(\"em\", {\n    parentName: \"p\"\n  }, \"$\"), \" prefix. Now wherever we use the \", mdx(\"em\", {\n    parentName: \"p\"\n  }, \"$\"), \" as prefix for the variable name,the script will automatically pass the variable\\u2019s value, just like that :snap:\\u26A1\\u26A1.  Everything that needs to be executed inside the loop should be between the \", mdx(\"code\", _extends({\n    parentName: \"p\"\n  }, {\n    \"className\": \"language-text\"\n  }), \"do\"), \" and \", mdx(\"code\", _extends({\n    parentName: \"p\"\n  }, {\n    \"className\": \"language-text\"\n  }), \"done\"), \" keywords. The loop will go on till the parameters are over.\"), mdx(\"hr\", null), mdx(\"p\", null, \"Now let us make a script which runs a python program,saves its output to another file and commits it and git push it.\\nHere I\\u2019ll be pushing it to a \", mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"https://gist.github.com\"\n  }), \"Gist\"), \".\", mdx(\"br\", {\n    parentName: \"p\"\n  }), \"\\n\", \"So some days ago I started using (Wakatime)[] which gets track on your coding activity and its super cool,showing it off in your GitHub profile seemed cool and one \", mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"phamous.dev\"\n  }), \"Campus Expert,John Pham\"), \" did do it and it looked super cool. But the way he did was using GitHub Actions, and no I didn\\u2019t apply for the Beta of GH Actions. So I made a Python\\uD83D\\uDC0D script to make something like his. You can find it \", mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"https://github.com/Athul-CA/wakatime-metrics\"\n  }), \"here\"), \".\", mdx(\"br\", {\n    parentName: \"p\"\n  }), \"\\n\", \"It\\u2019s a tad manual since API requests are \\uD83D\\uDE30\\uD83D\\uDE31. The manual thing is you\\u2019ve got to copy a json file from your wakatime dasboard\\u2019s \\u201Cembed\\u201D page. The rest of the work is done by a shell script\\uD83D\\uDC7B\\uD83D\\uDC7B. For showing the activity in my Profile too,I made a public gist with a \", mdx(\"code\", _extends({\n    parentName: \"p\"\n  }, {\n    \"className\": \"language-text\"\n  }), \".txt\"), \" file in GitHub and cloned it to my local machine. The shell script goes like this,\\uD83D\\uDC47\\uD83D\\uDC47\"), mdx(\"div\", {\n    \"className\": \"gatsby-highlight\",\n    \"data-language\": \"bash\"\n  }, mdx(\"pre\", _extends({\n    parentName: \"div\"\n  }, {\n    \"className\": \"language-bash\"\n  }), mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-bash\"\n  }), mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"token builtin class-name\"\n  }), \"cd\"), \" ~/path/to_the/python_file and json \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"token function\"\n  }), \"file\"), \"\\nnvim filename.json\\npython main.py filename.json \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"token operator\"\n  }), \">\"), \" ~/path_to_cloned_gist_repo/filename.txt\\n\", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"token builtin class-name\"\n  }), \"cd\"), \" ~/path_to_gist_repo\\n\", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"token function\"\n  }), \"git\"), \" commit -a -m \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"token string\"\n  }), \"\\\"New Metrics\\\"\"), \"\\n\", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"token function\"\n  }), \"git\"), \" push origin master\\n\"))), mdx(\"p\", null, \"When running this script, you\\u2019ll be first prompted to paste the \", mdx(\"code\", _extends({\n    parentName: \"p\"\n  }, {\n    \"className\": \"language-text\"\n  }), \"json\"), \" text you copied from the Wakatime dashboard. You should delete the current contents and paste the new ones and save it. You can use any editor of your choice, I use NeoVim. It will run the python program and it will push the changes to GitHub. Easy Right? Just with a few line of Bash Script we can automate quite a good amount of Tedious Tasks.\", mdx(\"br\", {\n    parentName: \"p\"\n  }), \"\\n\", \"We can set up a script for launching the terminal just as the System turns on but I believe its for you to find out more about it. This post might\\u2019ve helped and possibly this will be the needed push for you to explore the world of shell scripting and automation\\u270C\\uFE0F\\u270C\\uFE0F\\u270C\\uFE0F.\", mdx(\"br\", {\n    parentName: \"p\"\n  }), \"\\n\", \"I will post some more on this when I understand more of this some day.\\uD83D\\uDC7B\"));\n}\n;\nMDXContent.isMDXComponent = true;","frontmatter":{"title":"Shell Scripting to Automation","date":"July 02, 2019","description":"Automating Basic Unix stuff with Shell Scripts/Bash Scripts. From Pushing to different branches to saving you a Few Keypresses"}}},"pageContext":{"slug":"/Automate-stuff/","previous":{"fields":{"slug":"/mob-dev/"},"frontmatter":{"title":"Programming on your Phone"}},"next":{"fields":{"slug":"/probot/"},"frontmatter":{"title":"Making GitHub apps with Probot"}}}}}